#!/usr/bin/env bash
[[ $DEBUG ]] && set -x
set -o errexit


help_doc() {
	IFS= read -rd '' <<-'HelpDoc' || printf '%s' "${REPLY//'\	'/	}" 1>&2
		fd2f COMMAND [PARAMETER...]

		Executes COMMAND after converting file descriptors in PARAMETERs to temporary
		regular files.

		If a PARAMETER has a value of '/dev/fd/'* or '/dev/self/fd/'* the file
		descriptor is written to temporary regular file and the PARAMETER is replaced
		with the path of that file. If PARAMETER ends in an extension, the
		extension is appended to the temporary file name.

		After eligible PARAMETERs are replaced, COMMAND is executed with the new
		PARAMETERs.

		TEMPORARY FILES
		Temporary files are written to a 0700 permissioned directory created within
		the temp directory defined by env variables: TMPDIR, then XDG_RUNTIME_DIR,
		then path /tmp is used in fallback order.

		MOCK PROCESS
		  Command: fd2f my-prog -f /dev/fd/43.png
		    Write:             cat /dev/fd/43 > /tmp/fd2f__user_76.../2.png
		  Execute:      my-prog -f /tmp/fd2f__user_76.../2.png
		   Remove:              rm /tmp/fd2f__user_76.../2.png

		EXAMPLES
		# Docker Compose
		fd2f sudo docker-compose -f <(
		\	cat <<-'EOF'
		\		My Docker Compose YAML
		\	EOF
		).yml up

		# NodeJS
		printf '%s\n' 'pipe into nodejs' | fd2f node <(cat <<-'EOF'
		\	process.stdin.setEncoding('utf8');
		\	process.stdin.on('data', (data)=>{
		\		process.stdout.write(data)
		\	});
		\	process.stderr.write('Reading stdin...\n')
		EOF
		).js

	HelpDoc
	[[ $1 ]] && exit "$1"
}



print_stderr() {
	if [[ $1 == '0' ]]; then
		[[ $2 ]] && printf "$2" "${@:3}" 1>&2 || :
	else
		[[ $2 ]] && printf '%s'"$2" "ERROR: ${0##*/}, " "${@:3}" 1>&2 || :
		exit "$1"
	fi
}



make-temp-dir() {
	on_exit() {
		[[ $tmp_dir_is_made ]] && [[ -d "$temp_dir" ]] && rm -r -- "$temp_dir"
	}
	trap on_exit EXIT

	mkdir --mode 0700 -- "$temp_dir"
	tmp_dir_is_made=1
}



replace-fd() {
	# Define globals and locals
	tmp_dir_is_made=
	temp_dir=${TMPDIR:-${XDG_RUNTIME_DIR:-/tmp}}'/fd2f__'$USER'_'$$'_'${EPOCHREALTIME:-$(date +%s.%N)}
	local i param


	# Loop through params replacing file descriptors with regular files
	for i in "${!fd2f__params[@]}"; do
		[[ $i == 0 ]] && continue
		param=${fd2f__params[i]}


		# Ignore non-file descriptors
		[[ $param != '/dev/fd/'* ]] && [[ $param != '/dev/self/fd/'* ]] && continue


		# Extract the extension, and the path without the extension
		fd_ext=${param#*.}
		fd_path=${param%%.*}
		[[ $fd_ext == $fd_path ]] && fd_ext= || fd_ext='.'$fd_ext


		# Replace the parameter with the regular file path and write the file descriptor to it
		[[ $tmp_dir_is_made ]] || make-temp-dir
		fd2f__params[i]=$temp_dir'/'$i$fd_ext
		cat "$fd_path" > "${fd2f__params[i]}" || print_stderr 1 '%s\n' 'failed to write '"$fd_path"' to temp file: '"${fd2f__params[i]}"

	done
}



[[ $1 ]] || help_doc 1
fd2f__params=("$@")



# Convert file descriptors to regular files if parameters are present
[[ ${#fd2f__params[@]} != '1' ]] && replace-fd



# Execute command
"${fd2f__params[@]}"
exit $?



